const axios = require('axios');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT-4o Mini
async function askGpt4oMini(prompt) {
  try {
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions', // URL API GPT-4o Mini
      {
        model: "gpt-4o-mini",
        messages: [{ role: "user", content: prompt }],
        temperature: 0.5
      },
      {
        headers: {
          'Authorization': `Bearer ${process.env.GPT4O_MINI_API_KEY}`, // API-–∫–ª—é—á GPT-4o Mini
          'Content-Type': 'application/json'
        }
      }
    );

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
    if (response.status !== 200) {
      throw new Error(`API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}`);
    }

    return response.data.choices[0].message.content;
  } catch (error) {
    console.error('GPT-4o Mini API Error:', error.response?.data || error.message);
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞";
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
exports.handler = async (event) => {
  try {
    console.log('Raw input:', event.body); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    if (!event.body) {
      console.error('–ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞');
      return { statusCode: 400 };
    }

    const requestBody = JSON.parse(event.body);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    if (!requestBody.message) {
      console.error('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞:', requestBody);
      return { statusCode: 400 };
    }

    const { message } = requestBody;
    const chatId = message.chat.id;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    if (message.text === '/start') {
      await axios.post(`https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendMessage`, {
        chat_id: chatId,
        text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ Netlify üöÄ –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:'
      });
      return { statusCode: 200 };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!message.text) {
      console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞:', message);
      return { statusCode: 200 }; // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
    const botResponse = await askGpt4oMini(message.text);
    
    await axios.post(`https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendMessage`, {
      chat_id: chatId,
      text: botResponse,
      parse_mode: "Markdown"
    });

    return { statusCode: 200 };
  } catch (error) {
    console.error('Handler Error:', error);
    return { statusCode: 500 };
  }
};
